{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","CardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","background","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAY,2DACb,yBAAKC,IAAG,+BAA2BF,EAAMG,GAAjC,YAA+CC,IAAM,kBAC7D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCYXC,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPT,GAAMK,EAAOI,GAAGT,GAChBE,KAAQG,EAAOI,GAAGP,KAClBC,MAASE,EAAOI,GAAGN,WAG/B,OACI,yBAAKL,UAAY,IACZQ,ICLEK,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKd,UAAY,OACb,2BAAOA,UAAY,aAAae,KAAO,SAASC,YAAc,gBAAgBC,SAAYH,MCKvFI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAS,CAACC,UAAU,SAAUC,OAAO,YAAaC,OAAO,QAASC,WAAW,UAC7ExB,EAAMyB,WCuCJC,G,wDArCX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACTzB,OAAQ,GACRsB,YAAa,IAJR,E,gEAYO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACrB,OAAO8B,S,+BAItC,IAAD,OACUC,EAAeC,KAAKP,MAAMzB,OAAOiC,QACnC,SAAAC,GAAU,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAE9E,OACI,yBAAK1C,UAAY,MACb,yBAAKA,UAAY,UACb,wBAAIA,UAAY,QAAhB,eACA,kBAAC,EAAD,CAAWc,aAAgByB,KAAKb,kBAEpC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAU+B,U,GA/BtBM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.19a6aae9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className = 'light-blue bg-navy dib br3 pa3 ma2 bw2 shadow-5 grow tc'>\r\n            <img src ={`https://robohash.org/${props.id}?200x200`} alt = 'Profile_Photo' />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card ;","import React from 'react' ;\r\nimport Card from './Card' ; \r\n\r\nconst CardList = ({robots}) => {\r\n    const CardArray = robots.map((user,i) => {\r\n        return (\r\n            <Card \r\n                key = {i} \r\n                id = {robots[i].id} \r\n                name = {robots[i].name} \r\n                email = {robots[i].email} \r\n            />) ;\r\n    })\r\n    return(\r\n        <div className = ''>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default CardList ;","import React from 'react' ;\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input className = 'tc pa2 br2' type = 'search' placeholder = 'Search Robots' onChange = {searchChange}/> \r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default SearchBox ;","import React from 'react' ;\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY:'scroll', border:'3px solid', height:'459px', background:'black'}}>\r\n            {props.children}\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default Scroll ;\r\n","import React, {Component} from 'react' ;\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll' ;\r\nimport './App.css'\r\n\r\nclass App extends Component{ \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}))\r\n    }\r\n\r\n    render()\r\n    {\r\n        const filterRobots = this.state.robots.filter(\r\n            robot => {return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        return(\r\n            <div className = 'tc'>\r\n                <div className = 'buffer'>\r\n                    <h1 className = 'navy'>ROBOFREINDS</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/> \r\n                </div>\r\n                <Scroll>\r\n                    <CardList robots = {filterRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';   \nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}